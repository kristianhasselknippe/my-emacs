
* Readme
** Switching package manager
This configuration can either use package or straight for its package management.
To switch between them. To to [[Package or straight]].

* Setup
** Package or straight
- To use package, set the variable to "package".
- To use straight, set the variable to "straight".
#+BEGIN_SRC emacs-lisp :tangle yes
(setq which-package-manager-to-use "package")
#+END_SRC

** Using package
#+BEGIN_SRC emacs-lisp :tangle yes
(when (string= which-package-manager-to-use "package")
  (message "Initializing using package")
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
					  (not (gnutls-available-p))))
		 (proto (if no-ssl "http" "https")))
	;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
	(add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
	;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
	(when (< emacs-major-version 24)
	  ;; For important compatibility libraries like cl-lib
	  (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

(when (< emacs-major-version 27)
  (package-initialize))

  (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t))
#+END_SRC

** Using straight

*** Bootstrap
#+BEGIN_SRC emacs-lisp :tangle yes
(when (string= which-package-manager-to-use "straight")
  (message "Initializing using straight")
  (defvar bootstrap-version)
  (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	(with-current-buffer
		(url-retrieve-synchronously
		 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
		 'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage)))
#+END_SRC

*** Install use-package
#+BEGIN_SRC emacs-lisp :tangle yes
(when (string= which-package-manager-to-use "straight")
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t))
#+END_SRC

* Sane defaults
#+BEGIN_SRC emacs-lisp :tangle yes
(global-auto-revert-mode t)
#+END_SRC
* Flymake
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flymake)
#+END_SRC
* Magit

#+BEGIN_SRC emacs-lisp :tangle yes

(defun my-magit-mode-setup ()
  (define-key magit-mode-map (kbd "M-p") 'ace-window))

(use-package magit
  :bind ("C-c m" . 'magit-status)
  :config
  (setq magit-auto-revert-mode nil)
  (add-hook 'magit-mode-hook 'my-magit-mode-setup))

(defun my-smerge-mode-init ()
  (define-key smerge-mode-map (kbd "C-c C-c") 'smerge-keep-current)
  (define-key smerge-mode-map (kbd "C-c C-a") 'smerge-keep-all))

(add-hook 'smerge-mode-hook #'my-smerge-mode-init)

(use-package git-gutter)

(fset 'yes-or-no-p 'y-or-n-p)
(setq delete-by-moving-to-trash t)

#+END_SRC

* General and theme

#+BEGIN_SRC emacs-lisp :tangle yes
(set-language-environment "Latin-1")
(setq default-input-method "latin-1-prefix")

(setq-default tab-width 4)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

(use-package monokai-theme
   :config
   (load-theme 'monokai t))

(set-face-foreground 'font-lock-comment-face "light pink")
(setq-default c-basic-offset 4)
(setq default-tab-width 4)


;;Delete region when typing
(delete-selection-mode 1)

;; Auto refresh buffers
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
(setq shift-select-mode nil)

;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top

(setq fill-column 80)
(setq gc-cons-threshold 20000000)

;; Offer to create parent directories if they do not exist
;; http://iqbalansari.github.io/blog/2014/12/07/automatically-create-parent-directories-on-visiting-a-new-file-in-emacs/
(defun my-create-non-existent-directory ()
  (let ((parent-directory (file-name-directory buffer-file-name)))
	(when (and (not (file-exists-p parent-directory))
			   (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
	  (make-directory parent-directory t))))
(add-to-list 'find-file-not-found-functions 'my-create-non-existent-directory)

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
	  `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
	  `((".*" ,temporary-file-directory t)))


; Just for now to make it bigger on my large screen
(when (> (x-display-pixel-width) 3000)
  (set-face-attribute 'default nil :height 120))
(when (equal (x-display-pixel-width) 2560)
  (set-face-attribute 'default nil :height 140))

(when (and (string= system-type "darwin") (> (x-display-pixel-width) 3000))
  (set-face-attribute 'default nil :height 150))

;;Always highlight matching parens
(show-paren-mode)

(global-whitespace-mode +1)

(set-face-attribute 'whitespace-tab nil
					:foreground "#454545"
					:background nil
					:weight 'bold)

(when (not (string= system-type "darwin"))
  (set-face-attribute 'default nil
					  :family "Inconsolata"
					  :height 130
					  :weight 'normal
					  :width 'normal))
#+END_SRC

* Company

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package company
  :commands company-mode
  :hook 
    ((typescript-mode . company-mode)
    (flow-minor-mode . company-mode)))

(defun setup-company-mode ()
;;  (setq company-tooltip-align-annotations t)
  (define-key company-active-map (kbd "C-c C-c") 'company-complete)
  (define-key company-active-map (kbd "C-n") 'company-select-next-or-abort)
  (define-key company-active-map (kbd "C-p") 'company-select-previous-or-abort))
(add-hook 'company-mode-hook #'setup-company-mode)

(setq company-dabbrev-downcase 0)
(setq company-idle-delay 0.2)
#+END_SRC

* Nxml

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'nxml-mode)
(add-to-list 'auto-mode-alist '("\\.ux\\'" . nxml-mode))
#+END_SRC

* Asm

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package asm-mode
  :mode "\\.as\\'"
  :bind (:map asm-mode-map
		  ("<f5>" . #'compile)))

#+END_SRC

* Fsharp

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package fsharp-mode
  :mode "\\.fs\\'"
  :config
  (when (string= system-type "darwin")
	(setq inferior-fsharp-program "/Library/Frameworks/Mono.framework/Versions/Current/Commands/fsharpi --readline-")
	(setq fsharp-compiler "/Library/Frameworks/Mono.framework/Versions/Current/Commands/fsharpc")))

(defun my-fsharp-mode-setup ()
  (define-key fsharp-mode-map (kbd "C-c C-c") #'fsharp-ac/complete-at-point)
  (define-key fsharp-mode-map (kbd "M-p") #'ace-window))
(add-hook 'fsharp-mode-hook #'my-fsharp-mode-setup)

#+END_SRC

* Smex

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smex
  :bind ("M-x" . 'smex))
#+END_SRC

* Undo-tree

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package undo-tree
  :config (global-undo-tree-mode))

#+END_SRC

* JavaScript

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package js2-mode
  :mode "\\.js\\'")

#+END_SRC

* Json

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package json-mode
  :mode ("\\.json\\'" "\\.unoproj'"))

#+END_SRC

* Eshell

#+BEGIN_SRC emacs-lisp :tangle yes
(defun eshell-with-prefix-arg ()
  (interactive)
  (setq current-prefix-arg '()) ; C-u
  (call-interactively 'eshell))

(defun eshell-setup ()
  (define-key eshell-mode-map (kbd "M-p") 'ace-window))
(add-hook 'eshell-mode-hook 'eshell-setup)
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp :tangle yes

(defun dired-config ()
  (define-key dired-mode-map (kbd "C-c C-p") #'dired-toggle-read-only))

(add-hook 'dired-mode-hook #'dired-config)

#+END_SRC

* Nodejs

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nodejs-repl)
#+END_SRC

* Rust

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-rust-mode-setup ()
  (company-mode)
  (lsp))
(use-package rust-mode
  :mode "\\.rs\\'"
  :bind (:map rust-mode-map
			  ("C-c C-g" . 'helm-imenu)
			  ("C-c C-c" . 'company-lsp)
			  ("C-c C-r" . 'xref-find-references))
  :init
  (setq rust-format-on-save t))
(add-hook 'rust-mode-hook #'my-rust-mode-setup)
;;
;;(use-package lsp-rust
;;  :ensure t
;;  :config
;;  (setq lsp-rust-rls-command '("rls")))
#+END_SRC

* Yaml

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml\\'" "\\.yaml\\'"))
#+END_SRC

* C#

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package omnisharp
  :bind (:map omnisharp-mode-map
		  ("C-c C-c" . omnisharp-auto-complete)
		  ("C-c C-e" . flycheck-list-errors)
		  ("C-c C-f" . omnisharp-run-code-action-refactoring)
		  ("C-c f" . omnisharp-code-format-entire-file)
		  ("C-c s" . omnisharp-helm-find-symbols)
		  ("C-c C-d" . omnisharp-current-type-documentation)
		  ("C-c i" . omnisharp-find-implementations)
		  ("C-c r" . omnisharp-rename)
		  ("C-c C-r" . omnisharp-helm-find-usages)
		  ("M-." . omnisharp-go-to-definition)
		  ("C-c C-g" . omnisharp-navigate-to-solution-file)))

;;This is needed to get company working with omnisharp
(eval-after-load
 'company
 '(add-to-list 'company-backends 'company-omnisharp))
(add-hook 'csharp-mode-hook #'company-mode)

(use-package csharp-mode
  :mode ("\\.uno\\'" "\\.cs\\'"))

;;(use-package dotnet-mode
;;  :ensure dotnet)

(defun my-csharp-mode-setup ()
  ;;(dotnet-mode)
  (helm-mode)
;;  (unless omnisharp-server-executable-path
	;;(message "You need to install the omnisharp server using M-x omnisharp-install-server"))

  (omnisharp-mode)
  (company-mode)
  (flycheck-mode)

  (setq c-syntactic-indentation t)
  (c-set-style "ellemtel")
  (setq c-basic-offset 4)
  (setq truncate-lines t)
  (setq tab-width 4)
  (setq evil-shift-width 4))

(add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm
  :config
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-c y") 'helm-show-kill-ring))

(helm-mode 1)

(use-package helm-git-grep
  :bind ("C-c j" . helm-git-grep))
#+END_SRC

* Swiper

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swiper
  :bind ("C-s" . swiper))
#+END_SRC

* Rg/Ripgrep

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package rg)
(defun my-rg-mode-setup ()
  (define-key rg-mode-map (kbd "M-p") 'ace-window)
  (define-key rg-mode-map (kbd "<C-return>") 'compile-goto-error-same-window))
(add-hook 'rg-mode-hook #'my-rg-mode-setup)
#+END_SRC

* TypeScript

#+BEGIN_SRC emacs-lisp :tangle yes
(defun setup-tide-mode (mode-map)
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1)

  (define-key mode-map (kbd "C-c C-f") 'tide-fix)
  (define-key mode-map (kbd "C-c f") 'tide-format)
  (define-key mode-map (kbd "C-c C-c") 'company-complete)
  (define-key mode-map (kbd "C-c C-d") 'tide-documentation-at-point)
  (define-key mode-map (kbd "C-c C-i") 'tide-jump-to-implementation)
  (define-key mode-map (kbd "C-c C-r") 'tide-references)
  (define-key mode-map (kbd "C-c C-e") 'tide-project-errors)
  (define-key mode-map (kbd "C-c r") 'tide-rename-symbol)
  (define-key mode-map (kbd "C-c i") 'helm-imenu))

(use-package tide)

(use-package typescript-mode
  :mode ("\\.ts\\'" "\\.tsx\\'"))
(add-hook 'typescript-mode-hook (lambda () (setup-tide-mode typescript-mode-map)))

(use-package web-mode
  :mode "\\.tsx\\'" "\\.cshtml\\'" "\\.js\\'" "\\.jsx\\'")
(add-hook 'web-mode-hook
		  (lambda ()
			(when (string-equal "tsx" (file-name-extension buffer-file-name))
			  (setup-tide-mode web-mode-map))))
(flycheck-add-mode 'typescript-tslint 'web-mode)
#+END_SRC

* Flow

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package flow-minor-mode
  :bind (:map flow-minor-mode-map
			  ("C-c C-c" . 'company-complete))
  :config
  (add-hook 'web-mode-hook 'flow-minor-enable-automatically))

(use-package company-flow
  :config
  (with-eval-after-load 'company
  (add-to-list 'company-backends 'company-flow)))

#+END_SRC

* Restclient
#+BEGIN_SRC emacs-lisp :tangle yes
;;(if (string= which-package-manager-to-use "straight")
;;  (use-package restclient-mode
;;    :straight restclient
;;    :mode ("\\.http\\'")))
  (use-package restclient-mode
    :ensure restclient
    :mode ("\\.http\\'"))
#+END_SRC

* Counsel
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package counsel)
(global-set-key (kbd "C-M-s") 'counsel-rg)
(global-set-key (kbd "C-M-f") 'rg-project)
#+END_SRC

* MacOS stuff
#+BEGIN_SRC emacs-lisp :tangle yes
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))
(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
	(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
	  (process-send-string proc text)
	  (process-send-eof proc))))

(when (string= system-type "darwin")
  (load-file "~/.emacs.d/reveal-in-finder.el")
  (setq mac-option-modifier nil
		mac-command-modifier 'meta
		x-select-enable-clipboard nil)
  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx)

  (setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "/usr/local/bin") ":" (expand-file-name "~/.cargo/bin") ":" (expand-file-name "/Library/Frameworks/Mono.framework/Versions/Current/Commands/") ":" (expand-file-name "~/.ghcup/bin")))
  (setq exec-path
		(append exec-path
				(list
				 (expand-file-name "~/.ghcup/bin")
				 (expand-file-name "/usr/local/bin")
				 (expand-file-name "/Users/Hassel/.pub-cache/bin")
				 (expand-file-name "~/.cargo/bin")
				 (expand-file-name "~/.cargo/bin")
				 (expand-file-name "/Library/Frameworks/Mono.framework/Versions/Current/Commands/")))))
#+END_SRC

* Rainbow mode
#+BEGIN_SRC emacs-lisp :tangle yes
;;(use-package rainbow-mode)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package projectile)
(setq projectile-indexing-method 'alien)

;;Workaround for https://github.com/bbatsov/projectile/issues/1302
(setq projectile-git-submodule-command 'nil)
#+END_SRC

* Helm projectile
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-projectile
  :config
  (projectile-global-mode)
  (global-set-key (kbd "C-c t") 'helm-projectile-find-file)
  (global-set-key (kbd "C-c s") 'helm-projectile-switch-project))
#+END_SRC

* Change window size
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "S-C-<left>") 'shrink-winndow-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>") 'shrink-window)
(global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC

* Multiple cursors
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :config
  (global-set-key (kbd "C-S-p") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-S-n") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-x r t") 'mc/edit-lines)
  (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC

* Emacs-Lisp :Tangle Yes
#+BEGIN_SRC emacs-lisp :tangle yes
(defun elisp-mode-setup ()
  (message "initializing emacs-lisp")
  (company-mode)
  (define-key emacs-lisp-mode-map (kbd "C-c C-f") 'eval-defun)
  (define-key emacs-lisp-mode-map (kbd "C-c C-b") 'edebug-x-modify-breakpoint-wrapper)
  (define-key emacs-lisp-mode-map (kbd "C-c C-l") 'edebug-x-show-breakpoints)
  (define-key emacs-lisp-mode-map (kbd "C-c C-r") 'xref-find-references))
(add-hook 'emacs-lisp-mode-hook #'elisp-mode-setup)
#+END_SRC

* Editor config
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package editorconfig
  :config
  (editorconfig-mode 1))
#+END_SRC

* Ace window

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ace-window
  :config
  (global-set-key (kbd "M-p") 'ace-window)
  (global-set-key (kbd "C-M-p") 'ace-delete-window))
#+END_SRC

* Acy zip to word
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package avy-zap)
(define-key global-map (kbd "C-j") 'avy-goto-word-1)

(defun my-avy-paste-word (char)
   "Paste a word selected with avy"
   (interactive (list (read-char "char:" t)))
   (let ((avy-action 'my-copy-word))
	   (avy--generic-jump (my-avy-regexp char) nil avy-style)
	   (yank)))
(defun my-copy-word (pt)
	(save-excursion
	(goto-char pt)
	(kill-new (thing-at-point 'symbol))))
(defun my-avy-regexp (c)
   (concat
   "\\b"
   (string c)))
(define-key global-map (kbd "C-M-j") 'my-avy-paste-word)
#+END_SRC

* Cargo
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package cargo)
(defun setup-cargo-rust-mode ()
  (define-key rust-mode-map (kbd "<f5>") #'cargo-process-build)
  (define-key rust-mode-map (kbd "M-<f5>") #'cargo-process-test)
  (define-key rust-mode-map (kbd "S-<f5>") #'cargo-process-run)
  (define-key cargo-process-mode-map (kbd "M-p") #'ace-window))
(add-hook 'rust-mode-hook #'setup-cargo-rust-mode)
(add-hook 'cargo-process-mode-hook 'setup-cargo-rust-mode)
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package markdown-mode
  :mode ("\\.md\\'"))
(defun my-markdown-mode-setup ()
  (define-key markdown-mode-map (kbd "M-p") 'ace-window))
(add-hook 'markdown-mode-hook #'my-markdown-mode-setup)
#+END_SRC

* Libraries
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ht)
(use-package s)
(use-package dash)
#+END_SRC

* Wgrep
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package wgrep)
#+END_SRC

* Expand region

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package expand-region
  :config (global-set-key
	   (if (string= system-type "darwin")
		   (kbd "C-'")
		 (kbd "C-'")) 'er/expand-region))
#+END_SRC

* Locate file in explorer
#+BEGIN_SRC emacs-lisp :tangle yes
(defun locate-current-file-in-explorer ()
  (interactive)
  (cond
   ;; In buffers with file name
   ((buffer-file-name)
	(shell-command (concat "start explorer /e,/select,\"" (replace-regexp-in-string "/" "\\\\" (buffer-file-name)) "\"")))
   ;; In dired mode
   ((eq major-mode 'dired-mode)
	(shell-command (concat "start explorer /e,\"" (replace-regexp-in-string "/" "\\\\" (dired-current-directory)) "\"")))
   ;; In eshell mode
   ((eq major-mode 'eshell-mode)
	(shell-command (concat "start explorer /e,\"" (replace-regexp-in-string "/" "\\\\" (eshell/pwd)) "\"")))
   ;; Use default-directory as last resource
   (t
	(shell-command (concat "start explorer /e,\"" (replace-regexp-in-string "/" "\\\\" default-directory) "\"")))))
#+END_SRC

* Neotree

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package neotree)
#+END_SRC

* Hydra

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package hydra)

;;(use-package pretty-hydra
;;  :straight
;;    (pretty-hydra
;;      :type git
;;      :host github
;;      :repo "jerrypnz/major-mode-hydra.el"))

;;(use-package major-mode-hydra
;;  :after pretty-hydra
;;  :bind ("C-M-h" . major-mode-hydra))
;;  :straight
;;    (major-mode-hydra
;;      :type git
;;      :host github
;;      :repo "jerrypnz/major-mode-hydra.el"))

(defun start-eshell-in-current-dir ()
  (interactive)
  (eshell (universal-argument)))

(defun make-frame-in-center-with-some-size ()
  (make-frame :width 800 :height 150
		  :user-position 't
		  :left 500 :top 300))

(defun toggle-flyspell-and-whitespace-mode ()
  "Toggle `flyspell-mode' and `whitespace-mode'."
  (interactive)
  (if (derived-mode-p 'prog-mode)
	  (flyspell-prog-mode)
	(flyspell-mode)
	(when flyspell-mode
	  (flyspell-buffer)))
  (whitespace-mode 'toggle))


(use-package goto-chg)
#+END_SRC

** Omnisharp hydra

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-global (:color red)
   "
^Omnisharp^
--------------------
_r_: reload solution
_s_: start server
"
  ("r" omnisharp-reload-solution)
  ("s" omnisharp-start-omnisharp-server))
#+END_SRC

** Global hydra

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-global (:color teal)
   "
^Misc^                    ^Git^      
^^^^^^^^-----------------------------
_g_: Revert buffer       _b_: Blame  
_l_: Whitespace cleanup 
_c_: Goto last change
_e_: Error list
_w_: Compilet
_j_: Prettier
_z_: Zig build
_f_: Zig fmt
_r_: Reload web mode
_t_: Vterm
"
  ("g" revert-buffer)
  ("l" whitespace-cleanup)
  ("c" goto-last-change :exit nil)
  ("e" flycheck-list-errors)
  ("w" compile)
  ("j" prettier-js)
  ("E" start-eshell-in-current-dir)
  ("b" magit-blame)
  ("t" vterm)
  ("z" zig-build)
  ("f" zig-fmt)
  ("r" web-mode-reload)
)

(global-set-key (kbd "C-M-g") 'hydra-global/body)
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet
  :config
  (yas-global-mode 1)
  (global-set-key (kbd "C-c <tab>") 'yas-insert-snippet))

(use-package yasnippet-snippets)

(defun yasnippet-helpers/capitalize-first-char (&optional string)
  "Capitalize only the first character of the input STRING."
  (when (and string (> (length string) 0))
    (let ((first-char (substring string nil 1))
          (rest-str   (substring string 1)))
      (concat (capitalize first-char) rest-str))))
#+END_SRC

* Calendar
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package calfw)
(use-package calfw-org)
#+END_SRC

* Swift

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package swift-mode
  :hook (swift-mode . (lambda ()
  ;;(lsp-mode)
  (company-mode)
)))

(use-package flycheck-swift3)
(with-eval-after-load 'flycheck
  (add-hook 'flycheck-mode-hook #'flycheck-swift3-setup))

;;(use-package company-sourcekit
;;  :config
;;  (add-to-list 'company-backends 'company-sourcekit))

;;(when (string= system-type "darwin")
;;  (use-package lsp-sourcekit
;;    :after lsp-mode
;;    :config
;;    (setenv "SOURCEKIT_TOOLCHAIN_PATH" "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain")
;;    (setq lsp-sourcekit-executable (expand-file-name "~/sourcekit-lsp/.build/x86_64-apple-macosx10.10/debug/"))))
#+END_SRC

* Alert

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package alert)
#+END_SRC

* Compilation

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-compilation-mode-init ()
  (define-key compilation-mode-map (kbd "M-p") 'ace-window)
  (define-key compilation-mode-map (kbd "C-M-p") 'ace-delete-window))

(add-hook 'compilation-mode-hook #'my-compilation-mode-init)
#+END_SRC

* Which key

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package which-key
  :config
  (which-key-mode)
  (define-key global-map (kbd "C-c C-h") 'which-key-show-top-level))
#+END_SRC

* Prettier

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package prettier-js)
#+END_SRC

* Elfeed (RSS feed)
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package elfeed)
#+END_SRC

* Dart

** Dependencies

You need to install the dart_language_server using
#+BEGIN_SRC sh :tangle no
pub global activate dart_language_server
#+END_SRC

** Config

#+BEGIN_SRC emacs-lisp :tangle yes
(defun my-dart-mode-init ()
  (lsp)
  (flycheck-mode))

(use-package dart-mode
  :mode "\\.dart\\'"
  :config
  (setq dart-sdk-path "/Users/Hassel/flutter/bin/cache/dart-sdk/")
  (add-hook 'dart-mode-hook #'my-dart-mode-init))
#+END_SRC

* Git timemachine

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package git-timemachine)
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp :tangle yes
;; org-mode: Don't ruin S-arrow to switch windows please (use M-+ and M-- instead to toggle)
(setq org-replace-disputed-keys t)

;; Fontify org-mode code blocks
(setq org-src-fontify-natively t)

(defun my-org-mode-setup ()
  (define-key org-mode-map (kbd "M-p") 'ace-window)
  (define-key org-mode-map (kbd "C-j") 'avy-goto-word-1))
(add-hook 'org-mode-hook #'my-org-mode-setup)

(setq org-todo-keywords
'((sequence "TODO(t)" "|" "DONE(d)")
  (sequence "TOREPORT(r)" "|" "REPORTED(b)")))

(setq org-directory "~/org")
(setq org-default-notes-file (concat org-directory "/notes.org"))
(setq org-default-refile-file (concat org-directory "/refile.org"))

(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

(define-key global-map (kbd "C-c c") 'org-capture)

(setq org-capture-templates
	'(("t" "Todo" entry (file org-default-refile-file)
	   "* TODO %?\n%U" :empty-lines 1)
	  ("T" "Todo with Clipboard" entry (file org-default-refile-file)
	   "* TODO %?\n%U\n   %c" :empty-lines 1)
	  ("n" "Note" entry (file org-default-refile-file)
	   "* NOTE %?\n%U" :empty-lines 1)
	  ("N" "Note with Clipboard" entry (file org-default-refile-file)
	   "* NOTE %?\n%U\n   %c" :empty-lines 1)
	  ("e" "Event" entry (file+headline org-default-refile-file "Transient")
	   "* EVENT %?\n%U" :empty-lines 1)
	  ("E" "Event With Clipboard" entry (file+headline org-default-refile-file "Transient")
	   "* EVENT %?\n%U\n   %c" :empty-lines 1))
	)

(require 'ox-md)
(require 'ox-man)

(use-package org-ref)
(use-package org-repo-todo)

;;(major-mode-hydra-bind org-mode "Clock"
;;  ("i" org-clock-in "clock-in")
;;  ("o" org-clock-out "clock-out")
;;  ("r" org-clock-repor "report"))

#+END_SRC


* Elixir
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package elixir-mode
  :init
  (add-hook 'elixir-mode-hook #'company-mode))
(use-package alchemist)
#+END_SRC

* Powerline
#+BEGIN_SRC elisp :tangle yes
(use-package powerline
  :config (powerline-default-theme))
#+END_SRC
* Multi-term
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multi-term
  :bind (("M-p" . 'ace-window)))
#+END_SRC
* Zig mode
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package zig-mode)
#+END_SRC

* Dash
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm-dash
:config
(setq helm-dash-common-docsets '("OpenGL4")))

(defun dash-open-file (path)
  (with-temp-buffer
    (insert-file-contents (substring-no-properties path 8))
    (shr-render-buffer (current-buffer))))

#+END_SRC
* Haskell
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package haskell-mode)
#+END_SRC
* Vterm
#+BEGIN_SRC emacs-lisp :tangle yes
;; Vterm is installed using git, so this has to be done by hand
(define-key vterm-mode-map (kbd "M-p") 'ace-window)
#+END_SRC
